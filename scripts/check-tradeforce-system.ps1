#!/usr/bin/env pwsh
#
# TradeForce AI System Check
# This script diagnoses and repairs common issues with the TradeForce AI platform
#

$ErrorActionPreference = "Stop"

# ANSI color codes for better readability
$Green = "`e[32m"
$Red = "`e[31m"
$Yellow = "`e[33m"
$Blue = "`e[36m"
$Reset = "`e[0m"

# Define paths
$WebRootDir = "c:\Users\pablo\Projects\embassy-trade-motia\web"
$EnvFile = Join-Path $WebRootDir ".env.local"
$PackageJson = Join-Path $WebRootDir "package.json"

# Track overall status
$errors = 0
$warnings = 0
$fixes = 0

function Print-Header {
    param (
        [string]$message
    )
    
    Write-Host "`n$Blue════════════════════════════════════════════════════════════$Reset"
    Write-Host "$Blue$message$Reset"
    Write-Host "$Blue════════════════════════════════════════════════════════════$Reset`n"
}

function Print-Result {
    param (
        [string]$test,
        [string]$status,
        [string]$message = ""
    )
    
    $statusColor = $Reset
    
    switch ($status) {
        "PASS" { $statusColor = $Green }
        "WARN" { $statusColor = $Yellow; $global:warnings++ }
        "FAIL" { $statusColor = $Red; $global:errors++ }
        "FIXED" { $statusColor = $Green; $global:fixes++ }
    }
    
    Write-Host "$test... " -NoNewline
    Write-Host "[$statusColor$status$Reset]"
    
    if ($message) {
        Write-Host "  $message"
    }
}

# Check and create .env.local file if needed
function Check-EnvFile {
    Print-Header "Checking Environment Configuration"
    
    if (Test-Path $EnvFile) {
        # Check if env file has the necessary API keys
        $envContent = Get-Content $EnvFile -Raw
        $shyftKeyCheck = $envContent -match "NEXT_PUBLIC_SHYFT_API_KEY"
        $birdeyeKeyCheck = $envContent -match "NEXT_PUBLIC_BIRDEYE_API_KEY"
        $firebaseConfigCheck = $envContent -match "NEXT_PUBLIC_FIREBASE_API_KEY"
        
        # Report results
        Print-Result "Environment file check" "PASS" ".env.local file exists"
        
        if ($shyftKeyCheck) {
            Print-Result "Shyft API key check" "PASS" "Shyft API key is configured"
        } else {
            Print-Result "Shyft API key check" "WARN" "Shyft API key missing from .env.local"
        }
        
        if ($birdeyeKeyCheck) {
            Print-Result "Birdeye API key check" "PASS" "Birdeye API key is configured"
        } else {
            Print-Result "Birdeye API key check" "WARN" "Birdeye API key missing from .env.local"
        }
        
        if ($firebaseConfigCheck) {
            Print-Result "Firebase config check" "PASS" "Firebase config is present"
        } else {
            Print-Result "Firebase config check" "WARN" "Firebase config missing from .env.local"
        }
    } else {
        Print-Result "Environment file check" "WARN" ".env.local file missing"
        
        # Create a basic .env.local file
        try {
            $defaultEnvContent = @"
# TradeForce AI Environment Configuration
# Generated by system check script

# API Keys (replace with your actual keys)
NEXT_PUBLIC_SHYFT_API_KEY=
NEXT_PUBLIC_BIRDEYE_API_KEY=

# Backup API Keys for rate limiting issues
NEXT_PUBLIC_SHYFT_API_KEY_BACKUP_1=
NEXT_PUBLIC_SHYFT_API_KEY_BACKUP_2=
NEXT_PUBLIC_BIRDEYE_API_KEY_BACKUP_1=
NEXT_PUBLIC_BIRDEYE_API_KEY_BACKUP_2=

# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=
"@
            
            Set-Content -Path $EnvFile -Value $defaultEnvContent
            Print-Result "Create environment file" "FIXED" "Created template .env.local file"
        } catch {
            Print-Result "Create environment file" "FAIL" "Failed to create .env.local file: $_"
        }
    }
}

# Check dependencies
function Check-Dependencies {
    Print-Header "Checking Dependencies"
    
    # Check if package.json exists
    if (-Not (Test-Path $PackageJson)) {
        Print-Result "Package.json check" "FAIL" "package.json not found at $PackageJson"
        return
    }
    
    Print-Result "Package.json check" "PASS"
    
    # Check if node_modules exists
    $nodeModulesPath = Join-Path $WebRootDir "node_modules"
    if (-Not (Test-Path $nodeModulesPath)) {
        Print-Result "Node modules check" "FAIL" "node_modules directory not found, run 'npm install'"
    } else {
        Print-Result "Node modules check" "PASS" "node_modules directory exists"
    }
    
    # Check Node.js installation
    try {
        $nodeVersion = node -v
        Print-Result "Node.js check" "PASS" "Node.js $nodeVersion installed"
    } catch {
        Print-Result "Node.js check" "FAIL" "Node.js not installed or not in PATH"
    }
    
    # Check npm installation
    try {
        $npmVersion = npm -v
        Print-Result "npm check" "PASS" "npm $npmVersion installed"
    } catch {
        Print-Result "npm check" "FAIL" "npm not installed or not in PATH"
    }
}

# Check network connectivity to required APIs
function Check-Connectivity {
    Print-Header "Checking API Connectivity"
    
    # Array of endpoints to check
    $endpoints = @(
        @{Name="Shyft API (HTTP)"; Url="https://devnet-rpc.shyft.to/health"},
        @{Name="Solana DevNet"; Url="https://api.devnet.solana.com"},
        @{Name="Birdeye API"; Url="https://public-api.birdeye.so/public/status"}
    )
    
    foreach ($endpoint in $endpoints) {
        try {
            $response = Invoke-WebRequest -Uri $endpoint.Url -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
                Print-Result "$($endpoint.Name) connectivity" "PASS" "Status code: $($response.StatusCode)"
            } else {
                Print-Result "$($endpoint.Name) connectivity" "WARN" "Status code: $($response.StatusCode)"
            }
        } catch {
            Print-Result "$($endpoint.Name) connectivity" "FAIL" "Error: $($_.Exception.Message)"
        }
    }

    # Check websocket connectivity (we can only warn here as we can't directly test in PowerShell)
    Print-Result "WebSocket connectivity" "WARN" "Cannot automatically test WebSocket connectivity. If you're experiencing WebSocket errors, check firewall rules to allow WebSocket connections."
}

# Check for common Firebase issues
function Check-Firebase {
    Print-Header "Checking Firebase Configuration"
    
    # Check for IndexedDB issues
    if ($PSVersionTable.Platform -eq "Win32NT") {
        Print-Result "IndexedDB troubleshooting" "WARN" "To resolve Firebase permissions issues, try clearing your browser data, especially IndexedDB storage."
    }
    
    # Check for environment variables
    $envKeys = @(
        "NEXT_PUBLIC_FIREBASE_API_KEY",
        "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN",
        "NEXT_PUBLIC_FIREBASE_PROJECT_ID"
    )
    
    if (Test-Path $EnvFile) {
        $envContent = Get-Content $EnvFile -Raw
        
        foreach ($key in $envKeys) {
            if ($envContent -match "$key=.+") {
                Print-Result "$key check" "PASS" "Found in .env.local"
            } else {
                Print-Result "$key check" "WARN" "Not configured in .env.local"
            }
        }
    } else {
        foreach ($key in $envKeys) {
            Print-Result "$key check" "WARN" "Cannot check - .env.local file missing"
        }
    }
}

# Try to repair common issues
function Repair-CommonIssues {
    Print-Header "Attempting Repairs for Common Issues"
    
    # Clear cached data that might cause issues
    $nextCacheDir = Join-Path $WebRootDir ".next"
    if (Test-Path $nextCacheDir) {
        try {
            Remove-Item -Path (Join-Path $nextCacheDir "cache") -Recurse -Force -ErrorAction SilentlyContinue
            Print-Result "Next.js cache clear" "FIXED" "Cleared Next.js build cache"
        } catch {
            Print-Result "Next.js cache clear" "WARN" "Could not clear Next.js cache: $_"
        }
    }
    
    # Create log directory if it doesn't exist
    $logDir = Join-Path $WebRootDir "logs"
    if (-Not (Test-Path $logDir)) {
        try {
            New-Item -ItemType Directory -Path $logDir -Force | Out-Null
            Print-Result "Log directory" "FIXED" "Created logs directory"
        } catch {
            Print-Result "Log directory" "WARN" "Could not create logs directory: $_"
        }
    }

    # Instructions for manual fixes
    Print-Result "Manual fixes - Browser storage" "INFO" "To fix Firebase permission issues, please clear your browser's IndexedDB storage for this site"
    Print-Result "Manual fixes - API keys" "INFO" "If you're experiencing API rate limiting, try rotating your API keys in .env.local"
}

# Run diagnosis functions
function Run-Diagnosis {
    Print-Header "TradeForce AI System Check"
    
    Write-Host "This script will diagnose common issues with the TradeForce AI platform."
    Write-Host "Starting diagnosis at $(Get-Date)`n"
    
    # Run all checks
    Check-EnvFile
    Check-Dependencies
    Check-Connectivity
    Check-Firebase
    Repair-CommonIssues
    
    # Print summary
    Print-Header "Diagnosis Summary"
    
    Write-Host "$Green$fixes issues fixed$Reset"
    Write-Host "$Yellow$warnings warnings detected$Reset"
    Write-Host "$Red$errors errors found$Reset"
    
    if ($errors -gt 0) {
        Write-Host "`n$Red Critical issues were found that may prevent the application from running correctly.$Reset"
        Write-Host "Please fix these issues before continuing."
    } elseif ($warnings -gt 0) {
        Write-Host "`n$Yellow Warnings were found that may affect some functionality.$Reset"
        Write-Host "The application should run, but may have limited functionality."
    } else {
        Write-Host "`n$Green No critical issues were detected. Your system should be ready to run TradeForce AI.$Reset"
    }
    
    Print-Header "Next Steps"
    
    Write-Host "1. Start the development server:"
    Write-Host "   $Yellow npm run dev$Reset"
    Write-Host "2. Start with API rate limiting protection:"
    Write-Host "   $Yellow npm run dev:protected$Reset"
    Write-Host "3. Build for production:"
    Write-Host "   $Yellow npm run build$Reset"
    
    Write-Host "`nFor more debugging information, check the logs directory."
}

# Main execution
try {
    Run-Diagnosis
} catch {
    Write-Host "$Red`nError running diagnosis: $_$Reset"
    exit 1
}
