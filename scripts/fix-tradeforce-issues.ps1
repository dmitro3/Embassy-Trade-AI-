#!/usr/bin/env pwsh
#
# TradeForce AI Quick Fix Script
# Automatically attempts to fix common issues with the TradeForce AI platform
#

$ErrorActionPreference = "Stop"

# ANSI color codes for better readability
$Green = "`e[32m"
$Red = "`e[31m"
$Yellow = "`e[33m"
$Blue = "`e[36m"
$Reset = "`e[0m"

# Define paths
$WebRootDir = "c:\Users\pablo\Projects\embassy-trade-motia\web"
$EnvFile = Join-Path $WebRootDir ".env.local"
$NextCacheDir = Join-Path $WebRootDir ".next"
$NodeModulesDir = Join-Path $WebRootDir "node_modules"

Write-Host "$Blue════════════════════════════════════════════════════════════$Reset"
Write-Host "$Blue TradeForce AI Quick Fix Tool $Reset"
Write-Host "$Blue════════════════════════════════════════════════════════════$Reset"
Write-Host "This script will attempt to fix common issues with the TradeForce AI platform."

# Function to display progress
function Show-Step {
    param (
        [string]$message
    )
    
    Write-Host "`n$Yellow► $message...$Reset" 
}

# Clear Next.js build cache
Show-Step "Clearing Next.js build cache"
if (Test-Path $NextCacheDir) {
    try {
        Remove-Item -Path (Join-Path $NextCacheDir "cache") -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "  $Green✓$Reset Next.js cache cleared successfully"
    } catch {
        Write-Host "  $Red✗$Reset Failed to clear Next.js cache: $_"
    }
} else {
    Write-Host "  $Green✓$Reset No Next.js cache found"
}

# Check node_modules and dependencies
Show-Step "Checking node dependencies"
$pkgLockFile = Join-Path $WebRootDir "package-lock.json"
$PackageJsonFile = Join-Path $WebRootDir "package.json"

$needsReinstall = $false

if (-Not (Test-Path $NodeModulesDir)) {
    Write-Host "  $Yellow⚠$Reset node_modules directory not found"
    $needsReinstall = $true
}

if (-Not (Test-Path $pkgLockFile)) {
    Write-Host "  $Yellow⚠$Reset package-lock.json not found"
    $needsReinstall = $true
}

# Reinstall dependencies if needed
if ($needsReinstall -and (Test-Path $PackageJsonFile)) {
    Show-Step "Reinstalling node dependencies"
    try {
        Push-Location $WebRootDir
        npm ci --quiet
        Pop-Location
        Write-Host "  $Green✓$Reset Dependencies reinstalled successfully"
    } catch {
        Write-Host "  $Red✗$Reset Failed to reinstall dependencies: $_"
    }
}

# Fix Firebase permissions issues
Show-Step "Fixing Firebase permissions issues"
$idbFolders = @(
    "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\IndexedDB",
    "$env:LOCALAPPDATA\Mozilla\Firefox\Profiles\*\storage\default\http+++localhost+*\idb",
    "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\IndexedDB"
)

$foundFirebaseIdb = $false

foreach ($folder in $idbFolders) {
    $firebaseFiles = Get-ChildItem -Path $folder -Filter "firebase-installations-database*" -Recurse -ErrorAction SilentlyContinue
    
    if ($firebaseFiles) {
        $foundFirebaseIdb = $true
        Write-Host "  $Yellow⚠$Reset Found Firebase IndexedDB files in browser storage"
        Write-Host "  $Yellow⚠$Reset Please close your browser and restart the application"
        Write-Host "  $Blue➤$Reset Alternatively, clear your browser data for localhost"
    }
}

if (-Not $foundFirebaseIdb) {
    Write-Host "  $Green✓$Reset No Firebase IndexedDB files found that could cause permission issues"
}

# Generate a better .env.local file if it's missing
Show-Step "Checking environment configuration"
if (-Not (Test-Path $EnvFile)) {
    try {
        $defaultEnvContent = @"
# TradeForce AI Environment Configuration
# Generated by quick-fix script

# API Keys (replace with your actual keys)
NEXT_PUBLIC_SHYFT_API_KEY=whv00T87G8Sd8TeK
NEXT_PUBLIC_BIRDEYE_API_KEY=67f8ce614c594ab2b3efb742f8db69db

# Backup API Keys for rate limiting issues
NEXT_PUBLIC_SHYFT_API_KEY_BACKUP_1=Bxk6yuYefo2JylDi
NEXT_PUBLIC_SHYFT_API_KEY_BACKUP_2=UuCvncZT4H8dUL3v
NEXT_PUBLIC_BIRDEYE_API_KEY_BACKUP_1=5e01b3932a19433da1194476110da7d2
NEXT_PUBLIC_BIRDEYE_API_KEY_BACKUP_2=3dc4ffeb30dc400b8f0443db99927a43

# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyDP-kfq_R8QovdosM4tA4p79QWUlSy5jec
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=tradeforce-ai.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=tradeforce-ai
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=tradeforce-ai.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=253081292765
NEXT_PUBLIC_FIREBASE_APP_ID=1:253081292765:web:e75ba3b8ded7e6141c2b54
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=G-V0R6Z3PNXW
"@
        
        Set-Content -Path $EnvFile -Value $defaultEnvContent
        Write-Host "  $Green✓$Reset Created default .env.local file with sample API keys"
    } catch {
        Write-Host "  $Red✗$Reset Failed to create .env.local file: $_"
    }
} else {
    Write-Host "  $Green✓$Reset .env.local file already exists"
}

# Create logs directory if it doesn't exist
Show-Step "Setting up logging directories"
$logDir = Join-Path $WebRootDir "logs"
if (-Not (Test-Path $logDir)) {
    try {
        New-Item -ItemType Directory -Path $logDir -Force | Out-Null
        Write-Host "  $Green✓$Reset Created logs directory"
    } catch {
        Write-Host "  $Red✗$Reset Failed to create logs directory: $_"
    }
} else {
    Write-Host "  $Green✓$Reset Logs directory already exists"
    
    # Clean up old log files
    try {
        $oldLogs = Get-ChildItem -Path $logDir -Filter "*.log" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) }
        if ($oldLogs) {
            foreach ($log in $oldLogs) {
                Remove-Item -Path $log.FullName -Force
            }
            Write-Host "  $Green✓$Reset Cleaned up $(($oldLogs | Measure-Object).Count) old log files"
        }
    } catch {
        Write-Host "  $Yellow⚠$Reset Error cleaning old log files: $_"
    }
}

# Finish up with instructions
Write-Host "`n$Green════════════════════════════════════════════════════════════$Reset"
Write-Host "$Green Quick fixes have been applied. Try running the application again.$Reset"
Write-Host "$Green════════════════════════════════════════════════════════════$Reset"
Write-Host "`nStart the development server with:"
Write-Host "$Blue  npm run dev$Reset"
Write-Host "`nIf you continue to experience issues, run the full diagnostic with:"
Write-Host "$Blue  ./scripts/check-tradeforce-system.ps1$Reset"
